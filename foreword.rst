前言
========

请在使用 Flask 前阅读。希望本文能回答你一些关于 Flask 的用途和目标以及
Flask 适用情境的问题。

“微” 是什么意思？
-----------------------

“微”(micro) 并不表示你的整个 Web 应用必须塞进为单个 Python文件（虽然确实可以
），也不意味着 Flask 在功能上有欠缺。微框架中的“微”意味着 Flask 旨在保持核心
简单且易扩展。Flask 不会替你选择过多的东西，比如使用什么数据库。并且 Flask
已经做好的选择，比如使用什么模板引擎，是容易修改的。其余的一切都取决于你，因
此 Flask 可以满足你的一切需求。

默认情况下，Flask 不包含数据库抽象层、表单验证或是任何其它现有库可以胜任的东
西。除此之外，Flask 支持扩展，扩展给你的应用添加这些功能，如同是 Flask 自身
的实现。众多的扩展提供了数据库集成、表单验证、上传处理、多种开放认证技术等功
能。Flask 可能是“micro”的，但它已经能在需求繁杂的生产环境中投入使用。

配置与惯例
-----------------------------

Flask 数目众多的配置选项初始都有一个明智的默认值并遵循一些惯例。例如，按照惯
例模板和静态文件存储在应用 Python 源代码树下的子目录中，名字分别为
`templates` and `static` 。而这是可以改变的，你通常不必这么做，尤其是在刚使用
Flask 的时候。


与 Flask 共成长
-----------------------

当你配置好并运行 Flask，你会发现社区中有许多可以集成到你用于生产环境项目的扩
展。Flask 核心团队审阅这些扩展，确保经过检验的扩展在未来版本中仍能适用。

当你的代码库逐渐庞大，你仍在把握项目设计决策上拥有自由。Flask 会继续尽可能提供
Python 应该提供的一个非常简单的胶水层。你可以在 SQLAlchemy 或其它数据库工具
中实现高级模式，酌情引入非关系型数据持久化，也可以从框架无关的 WSGI（
Python 的 web 接口） 工具中获益。

Flask 里有许多可以定制其行为的钩子。当你需要进一步定制，可以继承 Flask 类。
如果你对此有兴趣，请阅读 :ref:`becomingbig` 一章。如果你好奇 Flask 的设计原
则，请查阅 :ref:`design` 章节。

继续阅读 :ref:`installation` 、 the :ref:`quickstart` 、或
:ref:`advanced_foreword`.
 
