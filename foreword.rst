前言
========

请在你开始使用 Flask 之前阅读这部分。希望它回答你一些关于这个项目的用意和目标，以及何时该使用此框架，何时不该用。

“微” 是什么意思？
-----------------------

“微”(micro) 并不意味着你的整个 Web 应用必须缩并为单个 Python文件（虽然确实可以），也不意味着 Flask 在功能上有欠缺。微框架中的“微”意味着 Flask 旨在保持核心简单但有可扩展性。Flask 不会为你做好许多选择，比如使用什么数据库。Flask 已经做好的选择，比如使用什么模板引擎，是容易修改的。其它的一切取决于你，因此 Flask 可以同时满足你需要的和不需要的。

默认情况下，Flask 不包含数据库抽象层、表单验证或是不同现有库可以胜任的任何其它东西。除此之外，Flask 扩展给你的应用添加这些功能如同是 Flask 自己的实现。数量庞大的扩展提供数据库集成、表单验证、上传处理、多种开放认证技术等功能。Flask 可能是“micro”的，但可能性却是无限的。

约定优于配置
-----------------------------

Flask 基于约定优于配置，即许多东西是预先配置好的。例如，按照惯例模板和静态文件存储在应用 Python 源代码树下的子目录中，而这是可以改变的，你通常不必这么做。我们希望你以最少的时间来配置并运行，而不是假设你需求的东西。

成长
----------

由于 Flask 是基于一个非常坚实的基础，本身并没有大量代码。因此它很容易适应，甚至对于大型应用。并且我们试图确保你可以尽可能通过继承或分支整个代码库来配置它。如果你对此有兴趣，请参阅 :ref:`becomingbig` 章节。

如果你对 Flask 的设计原则好奇，请跳转到 :ref:`design` 章节。

对于 Stalwart 和 Wizened...
-------------------------------

如果你对 Flask 的实现细节和它的架构是否满足你的需求，请阅读 :ref:`advanced_foreword` 。
